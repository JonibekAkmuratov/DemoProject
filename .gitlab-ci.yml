# GitLab CI/CD Pipeline for Demo Project
# Build, Push to Registry, Deploy va Health Check
#
# Required GitLab Variables:
# - DEPLOY_HOST: Server IP or domain
# - DEPLOY_USER: SSH user (default: deploy)
# - DEPLOY_SSH_KEY: Base64-encoded SSH private key
# - SONAR_HOST_URL: SonarQube server URL (optional)
# - SONAR_LOGIN: SonarQube token (optional)

stages:
  - build
  - test
  - push
  - deploy
  - health-check

variables:
  REGISTRY: registry.gitlab.com
  IMAGE_NAME: $REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  IMAGE_LATEST: $IMAGE_NAME:latest
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: 0
  DEPLOY_USER: ${DEPLOY_USER:-deploy}
  DOCKER_HOST: unix:///var/run/docker.sock
  DOCKER_TLS_CERTDIR: ""

# Cache configuration
cache:
  key: "${CI_COMMIT_REF_SLUG}-maven"
  paths:
    - .m2/repository
    - target/

# Build stage - Maven build
build:
  stage: build
  image: maven:3.9-eclipse-temurin-21
  script:
    - echo "üì¶ Building with Maven..."
    - mvn clean package -DskipTests -B
    - echo "‚úÖ Build completed successfully"
  artifacts:
    paths:
      - target/DemoProject.jar
    expire_in: 1 hour
  only:
    - main
    - develop
    - tags
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Unit tests stage
test:
  stage: test
  image: maven:3.9-eclipse-temurin-21
  script:
    - echo "üß™ Running unit tests..."
    - mvn test -B
    - echo "‚úÖ Tests completed"
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/surefire-reports/
    expire_in: 1 month
  only:
    - main
    - develop
    - merge_requests
  allow_failure: false

# SonarQube analysis (optional)
sonarqube:
  stage: test
  image: maven:3.9-eclipse-temurin-21
  script:
    - echo "üîç Running SonarQube analysis..."
    - mvn verify sonar:sonar -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN || true
  only:
    - main
    - develop
  allow_failure: true

# Docker build and push
build_and_push:
  stage: push
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY
  script:
    - echo "üê≥ Building Docker image..."
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_LATEST .
    - echo "üì§ Pushing image to registry..."
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_LATEST
    - echo "‚úÖ Image pushed: $IMAGE_NAME:$IMAGE_TAG"
  only:
    - main
    - develop
    - tags
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Deploy to production/staging
deploy:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add --no-cache openssh-client bash curl
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SSH_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ Deploying to server..."
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
      set -e
      
      echo "üì• Pulling latest image..."
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY
      docker pull $IMAGE_LATEST
      
      echo "üõë Stopping old container..."
      docker-compose -f /opt/demo-app/docker-compose.yml down --remove-orphans || true
      
      echo "üöÄ Starting new containers..."
      cd /opt/demo-app
      export SPRING_PROFILES_ACTIVE=docker
      docker-compose -f docker-compose.yml up -d
      
      echo "‚è≥ Waiting for services to start..."
      sleep 10
      
      echo "‚úÖ Deployment completed"
      EOF
  environment:
    name: $CI_COMMIT_REF_NAME
    url: http://$DEPLOY_HOST:8080
    deployment_tier: production
  only:
    - main
    - tags
  when: manual

# Health check stage
health_check:
  stage: health-check
  image: alpine:3.18
  before_script:
    - apk add --no-cache curl bash
  script:
    - echo "üè• Performing health check..."
    - |
      MAX_ATTEMPTS=30
      ATTEMPT=1
      
      while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
        if curl -f http://$DEPLOY_HOST:8080/actuator/health > /dev/null 2>&1; then
          echo "‚úÖ Application is healthy!"
          exit 0
        fi
        ATTEMPT=$((ATTEMPT + 1))
        sleep 2
      done
      
      echo "‚ùå Application health check failed!"
      exit 1
  only:
    - main
    - tags
  when: on_success
  retry:
    max: 2
    when:
      - script_failure

# Cleanup old images
cleanup:
  stage: deploy
  image: docker:24
  script:
    - echo "üßπ Cleaning up old images..."
    - docker system prune -a -f --filter "until=168h" || true
  only:
    - schedules
  allow_failure: true